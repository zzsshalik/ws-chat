{"version":3,"sources":["components/MessagingPanel/ConversationBox/ConversationBox.js","components/MessagingPanel/MessagingBox/MessagingBox.js","components/MessagingPanel/MessagingPanel.js","components/Login/Login.js","components/Logout/Logout.js","App.js","serviceWorker.js","index.js","components/MessagingPanel/ConversationBox/ConversationBox.module.scss"],"names":["Message","_ref","data","index","style","reverseIndex","length","react_default","a","createElement","className","styles","conversationItem","from","message","moment","unix","time","format","ConversationBox","listRef","React","createRef","this","current","scrollToItem","props","messages","index_esm","height","itemCount","itemSize","width","conversationContainer","itemData","ref","Component","MessagingBox","enterKeyCode","typingHandler","e","keyCode","_this","preventDefault","sendMessage","target","value","Fragment","onKeyDown","MessagingPanel","state","_this2","connection","onmessage","newMessages","JSON","parse","setState","concat","Object","toConsumableArray","ConversationBox_ConversationBox","MessagingPanel_MessagingBox_MessagingBox","Login","login","toConnect","username","id","onSubmit","type","Logout","logout","closeConnection","onClick","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","connect","WebSocket","onerror","console","log","localStorage","removeItem","close","objectSpread","readyState","send","stringify","bind","assertThisInitialized","setItem","getItem","setInterval","components_Logout_Logout","components_MessagingPanel_MessagingPanel","components_Login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.89df4eb2.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport moment from 'moment'\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nimport styles from './ConversationBox.module.scss'\r\n\r\nfunction Message({data,index,style}){\r\n  const reverseIndex=data.length- 1 -index\r\n  // console.log('reversed: '+reverseIndex+'length: '+data.length+\"normal: \"+index)\r\n   return( <div className={styles.conversationItem} style={style} >\r\n        {data[reverseIndex].from}:{data[reverseIndex].message}{moment.unix(data[reverseIndex].time/1000).format(\"DD MMM h:mm:ss\")}\r\n    </div>\r\n   )\r\n};\r\n\r\nexport default class ConversationBox extends Component{\r\n  listRef = React.createRef()\r\n  componentDidUpdate(){\r\n    this.listRef.current.scrollToItem(this.props.messages.length);\r\n  }\r\n      render(){\r\n        return(\r\n            <List\r\n                height={500}\r\n                itemCount={this.props.messages.length}\r\n                itemSize={35}\r\n                width='75vw'\r\n                className={styles.conversationContainer}\r\n                itemData={this.props.messages}\r\n                ref={this.listRef}\r\n             >\r\n            {Message}\r\n            </List>\r\n        )\r\n      }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nclass MessagingBox extends Component{\r\n    enterKeyCode = 13\r\n    typingHandler = (e) => {\r\n        if(e.keyCode === this.enterKeyCode){\r\n            e.preventDefault()\r\n            this.props.sendMessage(e.target.value)\r\n            e.target.value=''\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <>\r\n            <textarea onKeyDown={this.typingHandler}></textarea>\r\n        </>\r\n        )\r\n    }\r\n}\r\nexport default MessagingBox","import React, {Component} from 'react'\r\n\r\nimport ConversationBox from './ConversationBox/ConversationBox'\r\nimport MessagingBox from './MessagingBox/MessagingBox'\r\n// import styles from './MessagingPanel.module.scss'\r\n\r\nclass MessagingPanel extends Component{\r\n\r\n    state={\r\n        messages:[]\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.props.connection.onmessage = (messages) => {\r\n            const newMessages = JSON.parse(messages.data)\r\n            this.setState({messages:[ ...newMessages,...this.state.messages]})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <>\r\n            <ConversationBox messages={this.state.messages}/>\r\n            <MessagingBox sendMessage={this.props.sendMessage}/>\r\n        </>\r\n        )\r\n    }\r\n}\r\nexport default MessagingPanel","import React, {Component} from 'react'\r\n\r\n// import styles from './Login.module.scss'\r\n\r\nclass Login extends Component{\r\n\r\n    login = (e) => {\r\n        e.preventDefault()\r\n        this.props.toConnect(e.target.username.value)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div id='login'>\r\n            <form onSubmit={this.login}>\r\n                <label>Username:</label><br/>\r\n                <input type='text' id='username'/><br/>\r\n                <input type='submit' value='Log in'/>\r\n            </form>\r\n        </div>)\r\n    }\r\n}\r\nexport default Login","import React, {Component} from 'react'\r\n\r\n// import styles from './Login.module.scss'\r\n\r\nclass Logout extends Component{\r\n\r\n    logout = (e) => {\r\n        e.preventDefault()\r\n        this.props.closeConnection()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div id='logout'>\r\n            <button value=\"Logout\" onClick={this.logout}>Logout</button>\r\n        </div>)\r\n    }\r\n}\r\nexport default Logout","import React,{Component} from 'react';\n\nimport MessagingPanel from './components/MessagingPanel/MessagingPanel'\nimport Login from './components/Login/Login'\nimport Logout from './components/Logout/Logout'\n\nimport './App.scss';\n\nclass App extends Component{\nconstructor(props){\n  super(props)\n  this.toConnect=this.toConnect.bind(this)\n}\n  state = {\n    username:null,\n    connection:null,\n  }\n\n  connect = (username) => {\n    if(username){\n      const connection = new WebSocket('ws://st-chat.shas.tel')\n      this.setState({connection,username})\n      connection.onerror = (e) =>{\n       console.log(e)\n      }\n    }\n  }\n\n  toConnect(username){\n    localStorage.setItem('username', username)\n    this.connect(username)\n  }\n\n  closeConnection = () =>{\n    localStorage.removeItem('username')\n    this.state.connection.close()\n    this.setState({...this.state, username:null,connection:null})\n  }\n\n  componentDidMount(){\n    const username=localStorage.getItem('username')\n    if(username){\n      this.toConnect(username)\n    }\n    setInterval(()=>{\n      if(this.state.connection)\n      {\n        // console.log(this.state.connection.readyState)\n        // console.log(navigator.connection)\n      }\n    },2000)\n  }\n\n  sendMessage = (message) => {\n    const openConnectionCode=1\n    if(this.state.username){\n      if(this.state.connection.readyState === openConnectionCode){\n      const data = {\n        from: this.state.username,\n        message\n      }\n      this.state.connection.send(JSON.stringify(data))\n      }\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        { !this.state.username && !this.state.connection ?\n          <Login toConnect={this.toConnect}/>\n          :\n          <>\n            <Logout closeConnection={this.closeConnection}/>\n            <MessagingPanel username={this.state.username} connection={this.state.connection} sendMessage={this.sendMessage} />\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conversationContainer\":\"ConversationBox_conversationContainer__2L2pQ\"};"],"sourceRoot":""}